{"version":3,"sources":["logo.svg","MessageBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MessageList","messageList","map","ms","i","key","message","MessageBox","props","state","newProps","console","log","messages","this","push","setState","length","React","Component","App","handleSumbit","e","preventDefault","socket","emit","msg","room","user","data","io","on","className","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,8LCCrCC,EAAY,SAAC,GAAD,SAAEC,YAEAC,KAAI,SAACC,EAAGC,GAAJ,OAAQ,yBAAKC,IAAKD,GAAID,EAAGG,aAkClCC,E,YA7BV,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,CACPR,YAAY,IAHF,E,uFAMQS,GACtBC,QAAQC,IAAIF,GACZ,IAAIG,EAASC,KAAKL,MAAMR,YACxBY,EAASE,KAAKL,GAEdI,KAAKE,SAAS,CAACf,YAAYY,M,+BAMTC,KAAKL,MAAMR,YAAYC,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,EAAD,CAAaC,IAAKD,EAAGE,QAASH,OAEjC,OAAmC,IAAhCW,KAAKL,MAAMR,YAAYgB,OAAmB,iDAE7C,6BACG,kBAAC,EAAD,CAAahB,YAAaa,KAAKL,MAAMR,mB,GAxB1BiB,IAAMC,WC+ClBC,E,YA/Cb,WAAYZ,GAAO,IAAD,8BAChB,4CAAMA,KA6BRa,aAAa,SAACC,GACZA,EAAEC,iBAEF,EAAKd,MAAMe,OAAOC,KAAK,UAAW,CAACC,IAAI,KAAKC,KAAK,OAAQC,KAAK,cA/B9D,EAAKnB,MAAM,CACToB,KAAK,KACLL,OAAOM,IAAG,8BACVH,KAAK,OACLd,SAAS,GACTa,IAAI,KACJE,KAAK,YARS,E,iFAeE,IAAD,SACQd,KAAKL,MAAvBe,EADU,EACVA,OAAOG,EADG,EACHA,KAAKC,EADF,EACEA,KACnBjB,QAAQC,IAAIY,GACZA,EAAOC,KAAK,OAAO,CAACE,OAAKC,SACzBJ,EAAOO,GAAG,WAAU,SAACL,GACnBf,QAAQC,IAAIc,GACK,EAAKjB,MAAMI,SACfE,KAAKW,GAClB,EAAKV,SAAS,CAACU,a,+BAajB,OACE,yBAAKM,UAAU,OACb,4BAAKlB,KAAKL,MAAMkB,MAChB,kBAAC,EAAD,CAAYrB,QAASQ,KAAKL,MAAMiB,MAChC,4BAAQO,KAAK,SAASC,QAASpB,KAAKO,cAApC,a,GA1CUH,IAAMC,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa3cab18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nconst MessageList=({messageList})=>(\r\n    \r\n        messageList.map((ms,i)=><div key={i}>{ms.message}</div>)\r\n  \r\n\r\n)\r\n class  MessageBox extends React.Component{\r\n     constructor(props){\r\n         super(props)\r\n         this.state={\r\n             messageList:[]\r\n         }\r\n     }\r\n     componentWillReceiveProps(newProps){\r\n         console.log(newProps)\r\n         let messages=this.state.messageList\r\n         messages.push(newProps)\r\n         \r\n         this.setState({messageList:messages})\r\n     }\r\n\r\n     render(){\r\n\r\n        \r\n            const messages=this.state.messageList.map((ms,i)=>\r\n                <MessageList key={i} message={ms}/>);\r\n        \r\n             if(this.state.messageList.length===0) return(<div>Loading Messages</div>)\r\n             else  return (\r\n             <div>\r\n                <MessageList messageList={this.state.messageList}/>\r\n            </div>)\r\n     \r\n }\r\n }\r\n\r\nexport default MessageBox;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io,{socketIOClient,openSocket} from 'socket.io-client';\nimport MessageBox from './MessageBox'\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state={\n      data:null,\n      socket:io(\"http://localhost:5000/tech\"),\n      room:\"java\",\n      messages:[],\n      msg:null,\n      user:\"Dimitris\"\n    }\n \n    \n    \n  }\n \n  componentDidMount(){\n    const {socket,room,user}=this.state\n    console.log(socket)\n    socket.emit('join',{room,user})\n    socket.on('message',(msg)=>{\n      console.log(msg)\n      let messageArray=this.state.messages\n      messageArray.push(msg);\n      this.setState({msg})\n    })\n\n\n\n   \n  }\n  handleSumbit=(e)=>{\n    e.preventDefault()\n    let data={msg:\"Hi\", room:\"java\" ,user:\"Dimitris\"}\n    this.state.socket.emit('message', {msg:\"Hi\",room:\"java\" ,user:\"Dimitris\"})\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <h5>{this.state.room}</h5>\n        <MessageBox message={this.state.msg}/>\n        <button type=\"sumbit\" onClick={this.handleSumbit}>Send</button>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}